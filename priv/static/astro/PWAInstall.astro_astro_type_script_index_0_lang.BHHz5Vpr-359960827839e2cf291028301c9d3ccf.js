class c{deferredPrompt=null;isInstalled=!1;serviceWorkerRegistration=null;options;updateCheckInterval=null;constructor(e={}){this.options={serviceWorkerPath:"/sw.js",scope:"/",updateCheckInterval:3600*1e3,...e},this.checkIfInstalled()}async init(){try{await this.registerServiceWorker(),this.setupInstallPrompt(),this.monitorInstallStatus(),console.log("[PWA] Astro Manager initialized")}catch(e){console.error("[PWA] Initialization failed:",e),this.options.onError?.(e)}}async registerServiceWorker(){if(!("serviceWorker"in navigator)){console.log("[PWA] Service Workers not supported");return}try{this.serviceWorkerRegistration=await navigator.serviceWorker.register(this.options.serviceWorkerPath,{scope:this.options.scope}),console.log("[PWA] Service Worker registered:",this.serviceWorkerRegistration),this.updateCheckInterval=setInterval(()=>{this.serviceWorkerRegistration?.update()},this.options.updateCheckInterval),this.handleServiceWorkerUpdates()}catch(e){console.error("[PWA] Service Worker registration failed:",e),this.options.onError?.(e)}}handleServiceWorkerUpdates(){this.serviceWorkerRegistration&&this.serviceWorkerRegistration.addEventListener("updatefound",()=>{const e=this.serviceWorkerRegistration.installing;e&&e.addEventListener("statechange",()=>{e.state==="installed"&&navigator.serviceWorker.controller&&this.notifyUpdateAvailable()})})}notifyUpdateAvailable(){const e=new CustomEvent("pwa-update-available",{detail:{registration:this.serviceWorkerRegistration,onUpdate:()=>this.applyUpdate()}});document.dispatchEvent(e),this.options.onUpdate?.()}async applyUpdate(){this.serviceWorkerRegistration?.waiting&&(this.serviceWorkerRegistration.waiting.postMessage({type:"SKIP_WAITING"}),navigator.serviceWorker.addEventListener("controllerchange",()=>{window.location.reload()}))}setupInstallPrompt(){window.addEventListener("beforeinstallprompt",e=>{e.preventDefault(),this.deferredPrompt=e;const n=new CustomEvent("pwa-install-available",{detail:{prompt:()=>this.promptInstall(),canInstall:!0}});document.dispatchEvent(n),console.log("[PWA] Install prompt captured")}),window.addEventListener("appinstalled",()=>{console.log("[PWA] App installed"),this.isInstalled=!0;const e=new CustomEvent("pwa-installed",{detail:{isInstalled:!0}});document.dispatchEvent(e),this.options.onInstall?.(),this.deferredPrompt=null})}checkIfInstalled(){if(window.matchMedia("(display-mode: standalone)").matches){this.isInstalled=!0,console.log("[PWA] Already running in standalone mode");return}if(navigator.standalone){this.isInstalled=!0,console.log("[PWA] Already running as iOS standalone");return}new URLSearchParams(window.location.search).get("mode")==="standalone"&&(this.isInstalled=!0,console.log("[PWA] Launched in standalone mode"))}monitorInstallStatus(){window.matchMedia("(display-mode: standalone)").addEventListener("change",n=>{if(n.matches){this.isInstalled=!0;const s=new CustomEvent("pwa-status-changed",{detail:{isInstalled:!0}});document.dispatchEvent(s),console.log("[PWA] Changed to standalone mode")}})}async promptInstall(){if(!this.deferredPrompt){console.log("[PWA] No install prompt available");return}try{await this.deferredPrompt.prompt();const{outcome:e}=await this.deferredPrompt.userChoice;console.log(`[PWA] User ${e} the install prompt`),e==="accepted"&&this.trackInstallation(),this.deferredPrompt=null}catch(e){console.error("[PWA] Install prompt error:",e),this.options.onError?.(e)}}trackInstallation(){typeof gtag<"u"&&gtag("event","pwa_install",{event_category:"PWA",event_label:"Installation"}),console.log("[PWA] Installation tracked")}async clearCaches(){if(!navigator.serviceWorker.controller){console.log("[PWA] No active service worker");return}const e=new MessageChannel;return new Promise((n,s)=>{e.port1.onmessage=a=>{a.data.success?(console.log("[PWA] Caches cleared"),n()):s(new Error(a.data.error))},navigator.serviceWorker.controller?.postMessage({type:"CLEAR_CACHE"},[e.port2])})}getStatus(){return{isInstalled:this.isInstalled,hasServiceWorker:!!this.serviceWorkerRegistration,canInstall:!!this.deferredPrompt}}destroy(){this.updateCheckInterval&&(clearInterval(this.updateCheckInterval),this.updateCheckInterval=null),console.log("[PWA] Manager destroyed")}}document.addEventListener("DOMContentLoaded",()=>{if(!document.getElementById("pwa-install-container"))return;const e=new c({onInstall:()=>{l()},onUpdate:()=>{i()},onError:n=>{console.error("PWA Error:",n)}});e.init(),p(e)});function p(t){const e=document.getElementById("pwa-install-btn");e&&e.addEventListener("click",()=>{t.promptInstall()});const n=document.getElementById("pwa-update-btn");n&&n.addEventListener("click",()=>{t.applyUpdate(),o()});const s=document.getElementById("pwa-update-dismiss");s&&s.addEventListener("click",()=>{o()}),document.addEventListener("pwa-install-available",a=>{u()}),document.addEventListener("pwa-installed",a=>{r(),l()}),document.addEventListener("pwa-update-available",a=>{i()}),document.addEventListener("pwa-status-changed",a=>{const{isInstalled:d}=a.detail;d&&r()})}function u(){const t=document.getElementById("pwa-install-button");t&&(t.style.display="block")}function r(){const t=document.getElementById("pwa-install-button");t&&(t.style.display="none")}function i(){const t=document.getElementById("pwa-update-banner");t&&(t.style.display="block")}function o(){const t=document.getElementById("pwa-update-banner");t&&(t.style.display="none")}function l(){const t=document.getElementById("pwa-installed-confirmation");t&&(t.style.display="block",setTimeout(()=>{t.style.display="none"},3e3))}
