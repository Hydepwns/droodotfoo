<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover" />
    <meta name="csrf-token" content={get_csrf_token()} />
    
<!-- PWA Meta Tags -->
    <meta name="theme-color" content="#00ff00" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
    <meta name="apple-mobile-web-app-title" content="droo.foo" />
    <link rel="manifest" href="/manifest.json" />
    
<!-- iOS Icons -->
    <link rel="apple-touch-icon" href="/images/icon-192x192.png" />

    <.live_title default="droo.foo" suffix=" Â· Terminal Interface">
      {assigns[:page_title]}
    </.live_title>
    <link phx-track-static rel="stylesheet" href={~p"/assets/css/app.css"} />
    <script defer phx-track-static type="text/javascript" src={~p"/assets/js/app.js"}>
    </script>
    <script>
      (() => {
        const setTheme = (theme) => {
          if (theme === "system") {
            localStorage.removeItem("phx:theme");
            document.documentElement.removeAttribute("data-theme");
          } else {
            localStorage.setItem("phx:theme", theme);
            document.documentElement.setAttribute("data-theme", theme);
          }
        };
        if (!document.documentElement.hasAttribute("data-theme")) {
          setTheme(localStorage.getItem("phx:theme") || "system");
        }
        window.addEventListener("storage", (e) => e.key === "phx:theme" && setTheme(e.newValue || "system"));

        window.addEventListener("phx:set-theme", (e) => setTheme(e.target.dataset.phxTheme));
      })();
    </script>
  </head>
  <body>
    <!-- Theme Toggle Button (site-wide) -->
    <button
      class="theme-toggle"
      id="theme-toggle"
      title="Cycle Theme (capital-T)"
      aria-label="Cycle Theme (capital-T)"
    >
      T
    </button>

    {@inner_content}

    <script>
      // Theme cycling functionality
      const themes = ['theme-synthwave84', 'theme-green', 'theme-matrix', 'theme-cyberpunk', 'theme-phosphor', 'theme-amber', 'theme-high-contrast'];
      const themeNames = ['Synthwave84', 'Green', 'Matrix', 'Cyberpunk', 'Phosphor', 'Amber', 'High Contrast'];
      let currentThemeIndex = 0;

      // Get current theme from CSS classes on html element
      const getCurrentThemeIndex = () => {
        const classList = document.documentElement.classList;
        for (let i = 0; i < themes.length; i++) {
          if (classList.contains(themes[i])) {
            return i;
          }
        }
        return 0;
      };

      // Load saved theme on page load (run immediately)
      const savedTheme = localStorage.getItem('phx:theme');
      if (savedTheme && themes.includes(savedTheme)) {
        themes.forEach(t => document.documentElement.classList.remove(t));
        document.documentElement.classList.add(savedTheme);
        currentThemeIndex = themes.indexOf(savedTheme);
      } else {
        // Set default theme if none saved
        document.documentElement.classList.add(themes[0]);
        localStorage.setItem('phx:theme', themes[0]);
      }

      // Theme toggle button click handler
      document.addEventListener('DOMContentLoaded', () => {
        const button = document.getElementById('theme-toggle');
        if (button) {
          button.addEventListener('click', () => {
            currentThemeIndex = (currentThemeIndex + 1) % themes.length;
            const newTheme = themes[currentThemeIndex];

            // Remove all theme classes
            themes.forEach(t => document.documentElement.classList.remove(t));

            // Add new theme class
            document.documentElement.classList.add(newTheme);

            // Store in localStorage
            localStorage.setItem('phx:theme', newTheme);

            console.log('Theme changed to:', themeNames[currentThemeIndex], '(' + newTheme + ')');
          });
        }
      });

      // Keyboard shortcut 'T' for theme toggle
      document.addEventListener('keydown', (e) => {
        if (e.key === 'T' && !e.target.matches('input, textarea, select')) {
          const button = document.getElementById('theme-toggle');
          if (button) {
            button.click();
          }
        }
      });
    </script>
  </body>
</html>
