{
  "permissions": {
    "allow": [
      "Bash(MIX_ENV=test elixir -e \"result = Application.ensure_all_started(:droodotfoo); IO.inspect(result)\")",
      "Bash(MIX_ENV=test mix compile)",
      "Bash(MIX_ENV=test mix test test/droodotfoo/load_test.exs:8)",
      "Bash(cat:*)",
      "Bash(timeout 10 mix test:*)",
      "Bash(timeout 15 mix test test/droodotfoo_web/live/droodotfoo_live_test.exs:21 --include excluded)",
      "Bash(mix test:*)",
      "Bash(MIX_ENV=test iex -S mix -e \":timer.sleep(1000); IO.inspect(Process.whereis(Droodotfoo.PerformanceMonitor), label: \"\"PerformanceMonitor\"\"); IO.inspect(Process.whereis(Droodotfoo.RaxolApp), label: \"\"RaxolApp\"\"); IO.inspect(Process.whereis(Droodotfoo.PluginSystem.Manager), label: \"\"PluginManager\"\")\")",
      "Bash(MIX_ENV=test mix run -e 'result = Application.ensure_all_started(:droodotfoo); IO.inspect(result, label: \"\"Application start result\"\"); if elem(result, 0) == :ok, do: (Process.sleep(100); IO.inspect(Process.whereis(Droodotfoo.PerformanceMonitor), label: \"\"PerformanceMonitor\"\"))')",
      "Bash(mix compile:*)",
      "Bash(git add:*)",
      "Bash(chmod:*)",
      "Bash(mix assets.build:*)",
      "Bash(iex:*)",
      "Bash(mix run:*)",
      "WebFetch(domain:github.com)",
      "WebFetch(domain:raw.githubusercontent.com)",
      "Bash(mix phx.server:*)",
      "Read(//Users/droo/Desktop/**)",
      "Bash(awk:*)",
      "Bash(pkill:*)",
      "Bash(mix phx.routes:*)",
      "Bash(git commit:*)",
      "Bash(git rm:*)",
      "Bash(mix hex.info:*)",
      "Bash(git push:*)",
      "Bash(lsof:*)",
      "Bash(xargs kill:*)",
      "Bash(git restore:*)",
      "Bash(timeout 30 mix test test/droodotfoo/plugins/tetris_test.exs)",
      "Bash(for file in lib/droodotfoo/plugins/{tetris,twenty_forty_eight,wordle,conway}.ex)",
      "Bash(do echo \"=== $file ===\")",
      "Bash(grep:*)",
      "Bash(done)",
      "Bash(find:*)",
      "Bash(./bin/dev)",
      "WebFetch(domain:hex.pm)",
      "WebFetch(domain:hexdocs.pm)",
      "WebSearch",
      "Bash(mix deps.get:*)",
      "Bash(curl:*)",
      "Bash(MIX_ENV=test mix test --only raxol_web)",
      "Bash(MIX_ENV=test mix test test/raxol_web/themes_test.exs --trace)",
      "Bash(MIX_ENV=test mix test test/raxol_web/themes_test.exs)",
      "Bash(MIX_ENV=test mix test test/raxol_web/renderer_test.exs)",
      "Bash(MIX_ENV=test mix test test/raxol_web/liveview/terminal_component_test.exs)",
      "WebFetch(domain:api.github.com)",
      "Read(//Users/droo/Documents/CODE/raxol/**)",
      "Bash(mix format:*)",
      "Bash(ls:*)",
      "WebFetch(domain:blog.finiam.com)",
      "WebFetch(domain:walletconnect.com)",
      "Bash(npm install)",
      "Bash(perl:*)",
      "Bash(python3:*)",
      "Bash(git diff:*)",
      "Bash(git --no-pager diff TODO.md)",
      "Bash(MIX_ENV=dev mix compile)",
      "Bash(git reset:*)",
      "Bash(git mv:*)",
      "WebFetch(domain:owickstrom.github.io)",
      "Bash(timeout 15 mix test:*)",
      "Bash(mix docs:*)",
      "Bash(open:*)",
      "Bash(timeout 10 mix phx.server:*)",
      "Bash(timeout 5 mix phx.server:*)",
      "Bash(elixir:*)",
      "Bash(tree:*)",
      "Bash(MIX_ENV=test mix test:*)",
      "Bash(MIX_ENV=test mix compile:*)",
      "Bash(mix deps.unlock:*)",
      "Bash(mix credo:*)",
      "Bash(for func in \"is_spam_keyword?\" \"is_blocked_domain?\" \"is_number?\" \"is_game_over?\" \"is_help_toggle?\" \"is_mode_change?\")",
      "Bash(for file in lib/droodotfoo/fileverse/ddoc.ex lib/droodotfoo/fileverse/dsheet.ex lib/droodotfoo/fileverse/heartbit.ex lib/droodotfoo/fileverse/portal/webrtc.ex lib/droodotfoo/fileverse/storage.ex lib/droodotfoo/raxol/renderer/helpers.ex lib/droodotfoo/web3/ipfs.ex lib/droodotfoo/web3/transaction.ex test/droodotfoo/load_test.exs test/droodotfoo/input_rate_limiter_test.exs test/droodotfoo/adaptive_refresh_test.exs)",
      "Bash(do)",
      "Bash(\"$file\")",
      "Bash(for file in test/droodotfoo/raxol/renderer_test.exs test/droodotfoo/plugin_integration_test.exs test/droodotfoo/load_test.exs lib/droodotfoo_web/live/post_live.ex)",
      "Bash(head:*)",
      "Bash(mix clean:*)",
      "Bash(convert foxmask.png -resize 16x16 priv/static/images/favicon-16x16.png)",
      "Bash(convert foxmask.png -resize 32x32 priv/static/images/favicon-32x32.png)",
      "Bash(convert foxmask.png -resize 180x180 priv/static/images/apple-touch-icon.png)",
      "Bash(convert foxmask.png -define icon:auto-resize=16,32,48,64 priv/static/images/favicon.ico)",
      "Bash(magick foxmask.png -resize 192x192 priv/static/images/icon-192x192.png)",
      "Bash(magick foxmask.png -resize 512x512 priv/static/images/icon-512x512.png)"
    ],
    "deny": [],
    "ask": []
  }
}
